pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeecore/Ownable.sol";
contract SupplyChain is Ownable, FarmerRole, ConsumerRole, RetailerRole, DistributorRole {

  // Define 'owner'

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and cacept 'upc' as input argument
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);


modifier nonExistent(uint _upc){
  require(items[_upc].sku == 0);
  _;
}
  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
  require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }



  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() Ownable() public payable {
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
 

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc, address _originFarmerID, string _originFarmName, string _originFarmInformation, string  _originFarmLatitude, string  _originFarmLongitude, string  _productNotes) 
  onlyFarmer()
  nonExistent(_upc) public 
  {
    // Add the new item as part of Harvest
    items[_upc] = Item({
      sku: sku,
      upc: _upc,
      ownerID: _originFarmerID, // farmer is original owner
      originFarmerID: _originFarmerID,
      originFarmName: _originFarmName,
      originFarmInformation: _originFarmInformation, // Farmer Information
      originFarmLatitude: _originFarmLatitude, // Farm Latitude
      originFarmLongitude: _originFarmLongitude,
      productID: sku + _upc, // 0 for now
      productNotes: _productNotes,
      productPrice: uint(1), // whatever
      itemState: defaultState,
      distributorID: address(0),
      retailerID: address(0),
      consumerID: address(0)
    });
    
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Harvested(_upc);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _upc) 
  onlyFarmer() 
  /*verifyCaller(items[_upc].ownerID) */ public //
  // Call modifier to check if upc has passed previous supply chain stage
  // Call modifier to verify caller of this function
  
  {
    items[_upc].itemState = State.Processed;
    emit Processed(_upc);
    // Update the appropriate fields
    // Emit the appropriate event
    
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'

  function packItem(uint _upc) onlyFarmer() processed(_upc) /*verifyCaller(items[_upc].ownerID) */public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    emit Packed(_upc);
    
    // Emit the appropriate event
    
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) onlyFarmer() packed(_upc) /*verifyCaller(items[_upc].ownerID) */ public 
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function
  {
    // Update the appropriate fields
      items[_upc].itemState = State.ForSale;
      items[_upc].productPrice = _price;
       emit ForSale(_upc);
    // Emit the appropriate event
    
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) onlyDistributor() forSale(_upc) paidEnough(items[_upc].productPrice) checkValue(_upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifer to check if buyer has paid enough
    
    // Call modifer to send any excess ether back to buyer
    
    {
    
    // Update the appropriate fields - ownerID, distributorID, itemState
    Item storage _it = items[_upc];
    _it.distributorID = msg.sender;
    _it.ownerID = msg.sender;
    _it.itemState = State.Sold;
    
    // Transfer money to farmer
    _it.originFarmerID.transfer(_it.productPrice);
    
    // emit the appropriate event
    emit Sold(_upc);
    
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) onlyDistributor() 
  verifyCaller(items[_upc].ownerID)
   sold(_upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifier to verify caller of this function
    
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    emit Shipped(_upc);
  
    // Emit the appropriate event
    
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) onlyRetailer() shipped(_upc) public 
  //TODO implement more stuff here
    // Call modifier to check if upc has passed previous supply chain stage
    // Access Control List enforced by calling Smart Contract / DApp
    {
      Item storage _it = items[_upc];
      _it.itemState = State.Received;
      _it.ownerID = msg.sender;
      _it.retailerID = msg.sender;

      emit Received(_upc);

    // Update the appropriate fields - ownerID, retailerID, itemState
    
    // Emit the appropriate event
    
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) received(_upc) onlyConsumer()  public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
      Item storage _it = items[_upc];
      _it.ownerID = msg.sender;
      _it.consumerID = msg.sender;
      _it.itemState = State.Purchased;

    // Update the appropriate fields - ownerID, consumerID, itemState
    emit Purchased(_upc);
    // Emit the appropriate event
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  originFarmName,
  string  originFarmInformation,
  string  originFarmLatitude,
  string  originFarmLongitude
  ) 
  {
    Item storage ptr = items[_upc];
    itemSKU = ptr.sku;
    itemUPC = ptr.upc;
    ownerID = ptr.ownerID;
    originFarmerID = ptr.originFarmerID;
    originFarmName = ptr.originFarmName;
    originFarmInformation = ptr.originFarmInformation;
    originFarmLatitude = ptr.originFarmLatitude;
    originFarmLongitude = ptr.originFarmLongitude;  // Assign values to the 8 parameters
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
        Item storage ptr = items[_upc];
    itemSKU = ptr.sku;
    itemUPC = ptr.upc;
    productID = ptr.productID;
    productNotes = ptr.productNotes;
    productPrice = ptr.productPrice;
    itemState = uint(ptr.itemState);
    distributorID = ptr.distributorID;
    retailerID = ptr.retailerID;
    consumerID = ptr.consumerID;
    // Assign values to the 9 parameters
  
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
